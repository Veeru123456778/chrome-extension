import{e as R,c as H}from"./assets/youtube-api-BUNFlId9.js";const P="modulepreload",Y=function(t){return"/"+t},F={},N=function(i,e,o){let r=Promise.resolve();if(e&&e.length>0){document.getElementsByTagName("link");const s=document.querySelector("meta[property=csp-nonce]"),a=(s==null?void 0:s.nonce)||(s==null?void 0:s.getAttribute("nonce"));r=Promise.all(e.map(n=>{if(n=Y(n),n in F)return;F[n]=!0;const c=n.endsWith(".css"),m=c?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${n}"]${m}`))return;const d=document.createElement("link");if(d.rel=c?"stylesheet":P,c||(d.as="script",d.crossOrigin=""),d.href=n,a&&d.setAttribute("nonce",a),document.head.appendChild(d),c)return new Promise((h,A)=>{d.addEventListener("load",h),d.addEventListener("error",()=>A(new Error(`Unable to preload CSS for ${n}`)))})}))}return r.then(()=>i()).catch(s=>{const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=s,window.dispatchEvent(a),!a.defaultPrevented)throw s})},L={studyArea:null,funTimeLimit:20,isFirstTime:!0,notifications:!0},$={totalStudyTime:0,totalFunTime:0,dailyStudyTime:0,dailyFunTime:0,lastResetDate:new Date().toISOString().split("T")[0]},u={SETTINGS:"settings",TIME_STATS:"timeStats",ACTIVE_SESSIONS:"activeSessions",SESSION_HISTORY:"sessionHistory"};async function D(){try{const t=[u.SETTINGS,u.TIME_STATS,u.ACTIVE_SESSIONS,u.SESSION_HISTORY],i=await chrome.storage.local.get(t),e={};if(i.settings||(e.settings=L),!i.timeStats)e.timeStats=$;else{const o=i.timeStats,r=new Date().toISOString().split("T")[0];o.lastResetDate!==r&&(e.timeStats={...o,dailyStudyTime:0,dailyFunTime:0,lastResetDate:r})}i.activeSessions||(e.activeSessions={}),i.sessionHistory||(e.sessionHistory=[]),Object.keys(e).length>0&&await chrome.storage.local.set(e),console.log("Storage initialized successfully")}catch(t){throw console.error("Error initializing storage:",t),t}}async function y(){try{return(await chrome.storage.local.get(u.SETTINGS)).settings||L}catch(t){return console.error("Error getting settings:",t),L}}async function U(t){try{const e={...await y(),...t};await chrome.storage.local.set({[u.SETTINGS]:e}),console.log("Settings updated:",e)}catch(i){throw console.error("Error updating settings:",i),i}}async function w(){try{return(await chrome.storage.local.get(u.TIME_STATS)).timeStats||$}catch(t){return console.error("Error getting time stats:",t),$}}async function I(t,i){try{const e=await w(),o=new Date().toISOString().split("T")[0];e.lastResetDate!==o&&(e.dailyStudyTime=0,e.dailyFunTime=0,e.lastResetDate=o),t?(e.totalStudyTime+=i,e.dailyStudyTime+=i):(e.totalFunTime+=i,e.dailyFunTime+=i),await chrome.storage.local.set({[u.TIME_STATS]:e}),console.log(`Added ${i} seconds to ${t?"study":"fun"} time`)}catch(e){throw console.error("Error adding time:",e),e}}async function f(){try{return(await chrome.storage.local.get(u.ACTIVE_SESSIONS)).activeSessions||{}}catch(t){return console.error("Error getting active sessions:",t),{}}}async function b(t,i){try{const e=await f();e[t.toString()]=i,await chrome.storage.local.set({[u.ACTIVE_SESSIONS]:e}),console.log(`Updated active session for tab ${t}`)}catch(e){throw console.error("Error updating active session:",e),e}}async function E(t){try{const i=await f(),e=i[t.toString()];return e?(delete i[t.toString()],await chrome.storage.local.set({[u.ACTIVE_SESSIONS]:i}),console.log(`Removed active session for tab ${t}`),e):null}catch(i){throw console.error("Error removing active session:",i),i}}async function p(t){try{const e=(await chrome.storage.local.get(u.SESSION_HISTORY)).sessionHistory||[];e.push({...t,endTime:t.endTime||Date.now()}),e.length>100&&e.splice(0,e.length-100),await chrome.storage.local.set({[u.SESSION_HISTORY]:e}),console.log("Added session to history:",t.title)}catch(i){throw console.error("Error adding session to history:",i),i}}async function G(){try{return(await chrome.storage.local.get(u.SESSION_HISTORY)).sessionHistory||[]}catch(t){return console.error("Error getting session history:",t),[]}}async function v(){try{const t=await y(),i=await w(),e=i.dailyStudyTime/3600,s=t.funTimeLimit*e*60+10*60;return console.log(`Fun time check: ${i.dailyFunTime}s / ${s}s limit`),i.dailyFunTime>=s}catch(t){return console.error("Error checking fun time limit:",t),!1}}async function x(){try{const t=await y(),i=await w(),e=i.dailyStudyTime/3600,s=t.funTimeLimit*e*60+10*60,a=Math.max(0,s-i.dailyFunTime);return Math.floor(a/60)}catch(t){return console.error("Error getting remaining fun time:",t),0}}async function z(){try{await chrome.storage.local.clear(),await D(),console.log("All data reset successfully")}catch(t){throw console.error("Error resetting data:",t),t}}async function B(){try{return await chrome.storage.local.get(null)}catch(t){throw console.error("Error exporting data:",t),t}}async function K(t){try{await chrome.storage.local.clear(),await chrome.storage.local.set(t),console.log("Data imported successfully")}catch(i){throw console.error("Error importing data:",i),i}}const V=Object.freeze(Object.defineProperty({__proto__:null,addSessionToHistory:p,addTime:I,exportData:B,getActiveSessions:f,getRemainingFunTime:x,getSessionHistory:G,getSettings:y,getTimeStats:w,importData:K,initializeStorage:D,isFunTimeLimitExceeded:v,removeActiveSession:E,resetAllData:z,updateActiveSession:b,updateSettings:U},Symbol.toStringTag,{value:"Module"})),l=new Map,S=new Map;console.log("YouTube Study Tracker Service Worker Starting...");async function M(){try{console.log("Initializing extension storage..."),await D(),await q(),console.log("Extension initialized successfully")}catch(t){console.error("Error initializing extension:",t)}}async function q(){try{const t=await f(),i=await chrome.tabs.query({}),e=new Set(i.map(o=>{var r;return(r=o.id)==null?void 0:r.toString()}).filter(Boolean));for(const o in t){const r=t[o];if(!e.has(o)){console.log(`Cleaning up stale session for tab ${o}`);const s=parseInt(o);await E(s),r.watchTime>30&&await p({...r,endTime:Date.now()})}}}catch(t){console.error("Error cleaning up stale sessions:",t)}}async function W(t,i){var s,a;if(!((s=i.tab)!=null&&s.id)||!((a=t.data)!=null&&a.url)){console.warn("Invalid video detection message:",t);return}const e=i.tab.id,o=t.data.url,r=t.data.videoId||R(o);if(!r){console.warn("Could not extract video ID from URL:",o);return}console.log(`Video detected in tab ${e}: ${r}`);try{await T(e);const n=await y();if(!n.studyArea){console.log("No study area set, requesting first-time setup"),await chrome.tabs.sendMessage(e,{type:"SHOW_SETUP",data:{isFirstTime:!0}});return}const c=await H(r,n.studyArea.name,n.youtubeApiKey);console.log("Video classification result:",c);let m="unknown";if(c.recommendedClassification==="study")m="study",await k(e,r,o,c.videoInfo,!0);else if(c.recommendedClassification==="fun"){if(m="fun",await v()){console.log("Fun time limit exceeded, blocking video"),await C(e,"Fun time limit exceeded for today");return}await k(e,r,o,c.videoInfo,!1)}else{await chrome.tabs.sendMessage(e,{type:"REQUEST_CLASSIFICATION",data:{videoInfo:c.videoInfo,isEducationalCategory:c.isEducationalCategory,isRelatedToStudyArea:c.isRelatedToStudyArea,studyArea:n.studyArea.name}});return}l.set(e,{tabId:e,videoId:r,url:o,isBlocked:!1,startTime:Date.now(),lastUpdateTime:Date.now(),classification:m,isVisible:!0})}catch(n){console.error("Error handling video detection:",n)}}async function k(t,i,e,o,r){try{const s={videoId:i,title:(o==null?void 0:o.title)||"Unknown Video",category:(o==null?void 0:o.categoryName)||"Unknown",categoryId:(o==null?void 0:o.categoryId)||0,isStudyRelated:r,startTime:Date.now(),watchTime:0,tabId:t,url:e};await b(t,s),await j(t),console.log(`Started ${r?"study":"fun"} session for video: ${o==null?void 0:o.title}`),await chrome.tabs.sendMessage(t,{type:"SESSION_STARTED",data:{isStudy:r,videoInfo:o,classification:r?"study":"fun"}})}catch(s){console.error("Error starting video session:",s)}}async function j(t){S.has(t)&&clearInterval(S.get(t));const i=setInterval(async()=>{try{await O(t)}catch(e){console.error("Error in time tracking interval:",e),clearInterval(i),S.delete(t)}},5e3);S.set(t,i),console.log(`Started time tracking for tab ${t}`)}async function T(t){S.has(t)&&(clearInterval(S.get(t)),S.delete(t),console.log(`Stopped time tracking for tab ${t}`)),await O(t,!0)}async function Q(t,i){var s,a;if(!((s=i.tab)!=null&&s.id))return;const e=i.tab.id,o=(a=t.data)==null?void 0:a.isVisible;console.log(`Tab ${e} visibility changed to: ${o}`);const r=l.get(e);r&&(r.isVisible=o,l.set(e,r))}async function O(t,i=!1){var e;try{const r=(await f())[t.toString()];if(!r){console.log(`No active session found for tab ${t}`);return}let s=!1,a=0;try{const g=await chrome.tabs.sendMessage(t,{type:"GET_PLAYBACK_STATE"});s=(g==null?void 0:g.isPlaying)||!1,a=(g==null?void 0:g.currentTime)||0}catch{console.log(`Could not get playback state for tab ${t}, assuming not playing`),s=!1}const n=l.get(t),c=(n==null?void 0:n.isVisible)??!0,m=Date.now(),d=Math.floor((m-r.startTime)/1e3);if((!s||!c)&&!i){console.log(`Not counting time for tab ${t}: playing=${s}, visible=${c}`);return}const h={...r,watchTime:d,endTime:i?m:void 0};await b(t,h);const A=((e=l.get(t))==null?void 0:e.lastUpdateTime)||r.startTime,_=Math.floor((m-A)/1e3);_>0&&(console.log(`Adding ${_} seconds of ${r.isStudyRelated?"study":"fun"} time for tab ${t}`),await I(r.isStudyRelated,_),n&&(n.lastUpdateTime=m,l.set(t,n))),!r.isStudyRelated&&!i&&await v()&&(console.log("Fun time limit exceeded during session, blocking video"),await C(t,"You've reached your fun time limit for today!"),await T(t)),i&&d>10&&(console.log(`Ending session for tab ${t} with ${d} seconds watched`),await p(h),await E(t),l.delete(t))}catch(o){console.error("Error updating session time:",o)}}async function C(t,i){try{await chrome.tabs.sendMessage(t,{type:"BLOCK_VIDEO",data:{message:i}});const e=l.get(t);e&&(e.isBlocked=!0,l.set(t,e)),await T(t),console.log(`Blocked video in tab ${t}: ${i}`)}catch(e){console.error("Error blocking video:",e)}}async function J(t,i){var a;if(!((a=i.tab)!=null&&a.id)||!t.data)return;const e=i.tab.id,{isStudy:o,videoInfo:r}=t.data;if(console.log(`User classified video as ${o?"study":"fun"}: ${r==null?void 0:r.title}`),!o&&await v()){await C(e,"You've reached your fun time limit for today!");return}const s=l.get(e);s&&(await k(e,s.videoId,s.url,r,o),s.classification=o?"study":"fun",l.set(e,s))}async function X(t){console.log(`Tab ${t} removed`);try{await T(t),l.delete(t);const i=await E(t);i&&i.watchTime>10&&await p({...i,endTime:Date.now()})}catch(i){console.error("Error handling tab removal:",i)}}async function Z(t,i,e){if(i.status==="complete"&&e.url){const o=R(e.url),r=l.get(t);o&&r&&r.videoId!==o?(console.log(`Video changed in tab ${t}: ${r.videoId} -> ${o}`),await T(t),l.delete(t)):!o&&r&&(console.log(`User navigated away from YouTube in tab ${t}`),await T(t),l.delete(t))}}chrome.runtime.onStartup.addListener(M);chrome.runtime.onInstalled.addListener(M);chrome.runtime.onMessage.addListener((t,i,e)=>(console.log("Service worker received message:",t.type,t.data),t.type==="GET_SETTINGS"?(y().then(o=>{console.log("Sending settings:",o),e(o)}).catch(o=>{console.error("Error getting settings:",o),e({error:o.message})}),!0):t.type==="GET_STATS"?(Promise.all([N(()=>Promise.resolve().then(()=>V),void 0).then(o=>o.getTimeStats()),x()]).then(([o,r])=>{console.log("Sending stats:",{stats:o,remainingFunTime:r}),e({stats:o,remainingFunTime:r})}).catch(o=>{console.error("Error getting stats:",o),e({error:o.message})}),!0):t.type==="UPDATE_SETTINGS"?(U(t.data).then(()=>{console.log("Settings updated successfully"),e({success:!0})}).catch(o=>{console.error("Error updating settings:",o),e({error:o.message})}),!0):t.type==="INIT_CHECK"?(y().then(o=>{const r={isFirstTime:o.isFirstTime,hasStudyArea:!!o.studyArea};console.log("Sending init check:",r),e(r)}).catch(o=>{console.error("Error in init check:",o),e({error:o.message})}),!0):t.type==="RESET_DATA"?(N(()=>Promise.resolve().then(()=>V),void 0).then(o=>o.resetAllData()).then(()=>{console.log("Data reset successfully"),e({success:!0})}).catch(o=>{console.error("Error resetting data:",o),e({error:o.message})}),!0):((async()=>{var o;try{switch(t.type){case"VIDEO_DETECTED":await W(t,i);break;case"CLASSIFICATION_RESPONSE":await J(t,i);break;case"VIDEO_ENDED":(o=i.tab)!=null&&o.id&&await T(i.tab.id);break;case"VISIBILITY_CHANGE":await Q(t,i);break;default:console.warn("Unknown message type:",t.type)}}catch(r){console.error("Error handling message:",r)}})(),!1)));chrome.tabs.onRemoved.addListener(X);chrome.tabs.onUpdated.addListener(Z);chrome.runtime.onSuspend.addListener(async()=>{console.log("Extension suspending, saving all active sessions...");for(const[t]of l.entries())try{await O(t,!0)}catch(i){console.error(`Error saving session for tab ${t}:`,i)}});console.log("YouTube Study Tracker Service Worker Loaded");

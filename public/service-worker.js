const E={studyArea:null,funTimeLimit:20,isFirstTime:!0,notifications:!0},v={totalStudyTime:0,totalFunTime:0,dailyStudyTime:0,dailyFunTime:0,lastResetDate:new Date().toISOString().split("T")[0]},c={SETTINGS:"settings",TIME_STATS:"timeStats",ACTIVE_SESSIONS:"activeSessions",SESSION_HISTORY:"sessionHistory"};async function S(){try{return(await chrome.storage.local.get(c.SETTINGS)).settings||E}catch(t){return console.error("Error getting settings:",t),E}}async function V(t){try{const e={...await S(),...t};await chrome.storage.local.set({[c.SETTINGS]:e}),console.log("Settings updated:",e)}catch(o){throw console.error("Error updating settings:",o),o}}async function T(){try{return(await chrome.storage.local.get(c.TIME_STATS)).timeStats||v}catch(t){return console.error("Error getting time stats:",t),v}}async function M(t,o){try{const e=await T(),i=new Date().toISOString().split("T")[0];e.lastResetDate!==i&&(e.dailyStudyTime=0,e.dailyFunTime=0,e.lastResetDate=i),t?(e.totalStudyTime+=o,e.dailyStudyTime+=o):(e.totalFunTime+=o,e.dailyFunTime+=o),await chrome.storage.local.set({[c.TIME_STATS]:e}),console.log(`Added ${o} seconds to ${t?"study":"fun"} time`)}catch(e){throw console.error("Error adding time:",e),e}}async function w(){try{return(await chrome.storage.local.get(c.ACTIVE_SESSIONS)).activeSessions||{}}catch(t){return console.error("Error getting active sessions:",t),{}}}async function D(t,o){try{const e=await w();e[t.toString()]=o,await chrome.storage.local.set({[c.ACTIVE_SESSIONS]:e}),console.log(`Updated active session for tab ${t}`)}catch(e){throw console.error("Error updating active session:",e),e}}async function A(t){try{const o=await w(),e=o[t.toString()];return e?(delete o[t.toString()],await chrome.storage.local.set({[c.ACTIVE_SESSIONS]:o}),console.log(`Removed active session for tab ${t}`),e):null}catch(o){throw console.error("Error removing active session:",o),o}}async function k(t){try{const e=(await chrome.storage.local.get(c.SESSION_HISTORY)).sessionHistory||[];e.push({...t,endTime:t.endTime||Date.now()}),e.length>100&&e.splice(0,e.length-100),await chrome.storage.local.set({[c.SESSION_HISTORY]:e}),console.log("Added session to history:",t.title)}catch(o){throw console.error("Error adding session to history:",o),o}}async function $(){try{const t=await S(),o=await T(),e=o.dailyStudyTime/3600,n=t.funTimeLimit*e*60+10*60;return console.log(`Fun time check: ${o.dailyFunTime}s / ${n}s limit`),o.dailyFunTime>=n}catch(t){return console.error("Error checking fun time limit:",t),!1}}async function U(){try{const t=await S(),o=await T(),e=o.dailyStudyTime/3600,n=t.funTimeLimit*e*60+10*60,l=Math.max(0,n-o.dailyFunTime);return Math.floor(l/60)}catch(t){return console.error("Error getting remaining fun time:",t),0}}async function I(){try{await chrome.storage.local.clear(),await C(),console.log("All data reset successfully")}catch(t){throw console.error("Error resetting data:",t),t}}async function C(){try{const t=[c.SETTINGS,c.TIME_STATS,c.ACTIVE_SESSIONS,c.SESSION_HISTORY],o=await chrome.storage.local.get(t),e={};if(o.settings||(e.settings=E),!o.timeStats)e.timeStats=v;else{const i=o.timeStats,s=new Date().toISOString().split("T")[0];i.lastResetDate!==s&&(e.timeStats={...i,dailyStudyTime:0,dailyFunTime:0,lastResetDate:s})}o.activeSessions||(e.activeSessions={}),o.sessionHistory||(e.sessionHistory=[]),Object.keys(e).length>0&&await chrome.storage.local.set(e),console.log("Storage initialized successfully")}catch(t){throw console.error("Error initializing storage:",t),t}}function N(t){if(!t)return null;const o=[/(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,/youtube\.com\/v\/([^&\n?#]+)/,/youtube\.com\/watch\?.*v=([^&\n?#]+)/];for(const e of o){const i=t.match(e);if(i&&i[1])return i[1]}return null}async function R(t,o,e){try{return console.log(`Classifying video ${t} for study area: ${o}`),{videoInfo:{title:"Unknown Video",categoryName:"Unknown",categoryId:0},isEducationalCategory:!1,isRelatedToStudyArea:!1,recommendedClassification:"unknown",confidence:.5}}catch(i){return console.error("Error classifying video:",i),{videoInfo:{title:"Error classifying video",categoryName:"Unknown",categoryId:0},isEducationalCategory:!1,isRelatedToStudyArea:!1,recommendedClassification:"unknown",confidence:0}}}const r=new Map,g=new Map;console.log("YouTube Study Tracker Service Worker Starting...");async function F(){try{console.log("Initializing extension storage..."),await C(),await x(),console.log("Extension initialized successfully")}catch(t){console.error("Error initializing extension:",t)}}async function x(){try{const t=await w(),o=await chrome.tabs.query({}),e=new Set(o.map(i=>{var s;return(s=i.id)==null?void 0:s.toString()}).filter(Boolean));for(const i in t){const s=t[i];if(!e.has(i)){console.log(`Cleaning up stale session for tab ${i}`);const n=parseInt(i);await A(n),s.watchTime>30&&await k({...s,endTime:Date.now()})}}}catch(t){console.error("Error cleaning up stale sessions:",t)}}async function H(t,o){var n,l;if(!((n=o.tab)!=null&&n.id)||!((l=t.data)!=null&&l.url)){console.warn("Invalid video detection message:",t);return}const e=o.tab.id,i=t.data.url,s=t.data.videoId||N(i);if(!s){console.warn("Could not extract video ID from URL:",i);return}console.log(`Video detected in tab ${e}: ${s}`);try{await y(e);const a=await S();if(!a.studyArea){console.log("No study area set, requesting first-time setup"),await chrome.tabs.sendMessage(e,{type:"SHOW_SETUP",data:{isFirstTime:!0}});return}const u=await R(s,a.studyArea.name,a.youtubeApiKey);console.log("Video classification result:",u);let d="unknown";if(u.recommendedClassification==="study")d="study",await p(e,s,i,u.videoInfo,!0);else if(u.recommendedClassification==="fun"){if(d="fun",await $()){console.log("Fun time limit exceeded, blocking video"),await b(e,"Fun time limit exceeded for today");return}await p(e,s,i,u.videoInfo,!1)}else{await chrome.tabs.sendMessage(e,{type:"REQUEST_CLASSIFICATION",data:{videoInfo:u.videoInfo,isEducationalCategory:u.isEducationalCategory,isRelatedToStudyArea:u.isRelatedToStudyArea,studyArea:a.studyArea.name}});return}r.set(e,{tabId:e,videoId:s,url:i,isBlocked:!1,startTime:Date.now(),lastUpdateTime:Date.now(),classification:d,isVisible:!0})}catch(a){console.error("Error handling video detection:",a)}}async function p(t,o,e,i,s){try{const n={videoId:o,title:(i==null?void 0:i.title)||"Unknown Video",category:(i==null?void 0:i.categoryName)||"Unknown",categoryId:(i==null?void 0:i.categoryId)||0,isStudyRelated:s,startTime:Date.now(),watchTime:0,tabId:t,url:e};await D(t,n),await G(t),console.log(`Started ${s?"study":"fun"} session for video: ${i==null?void 0:i.title}`),await chrome.tabs.sendMessage(t,{type:"SESSION_STARTED",data:{isStudy:s,videoInfo:i,classification:s?"study":"fun"}})}catch(n){console.error("Error starting video session:",n)}}async function G(t){g.has(t)&&clearInterval(g.get(t));const o=setInterval(async()=>{try{await L(t)}catch(e){console.error("Error in time tracking interval:",e),clearInterval(o),g.delete(t)}},5e3);g.set(t,o),console.log(`Started time tracking for tab ${t}`)}async function y(t){g.has(t)&&(clearInterval(g.get(t)),g.delete(t),console.log(`Stopped time tracking for tab ${t}`)),await L(t,!0)}async function Y(t,o){var n,l;if(!((n=o.tab)!=null&&n.id))return;const e=o.tab.id,i=(l=t.data)==null?void 0:l.isVisible;console.log(`Tab ${e} visibility changed to: ${i}`);const s=r.get(e);s&&(s.isVisible=i,r.set(e,s))}async function L(t,o=!1){var e;try{const s=(await w())[t.toString()];if(!s){console.log(`No active session found for tab ${t}`);return}let n=!1,l=0;try{const m=await chrome.tabs.sendMessage(t,{type:"GET_PLAYBACK_STATE"});n=(m==null?void 0:m.isPlaying)||!1,l=(m==null?void 0:m.currentTime)||0}catch{console.log(`Could not get playback state for tab ${t}, assuming not playing`),n=!1}const a=r.get(t),u=(a==null?void 0:a.isVisible)??!0,d=Date.now(),f=Math.floor((d-s.startTime)/1e3);if((!n||!u)&&!o){console.log(`Not counting time for tab ${t}: playing=${n}, visible=${u}`);return}const _={...s,watchTime:f,endTime:o?d:void 0};await D(t,_);const O=((e=r.get(t))==null?void 0:e.lastUpdateTime)||s.startTime,h=Math.floor((d-O)/1e3);h>0&&(console.log(`Adding ${h} seconds of ${s.isStudyRelated?"study":"fun"} time for tab ${t}`),await M(s.isStudyRelated,h),a&&(a.lastUpdateTime=d,r.set(t,a))),!s.isStudyRelated&&!o&&await $()&&(console.log("Fun time limit exceeded during session, blocking video"),await b(t,"You've reached your fun time limit for today!"),await y(t)),o&&f>10&&(console.log(`Ending session for tab ${t} with ${f} seconds watched`),await k(_),await A(t),r.delete(t))}catch(i){console.error("Error updating session time:",i)}}async function b(t,o){try{await chrome.tabs.sendMessage(t,{type:"BLOCK_VIDEO",data:{message:o}});const e=r.get(t);e&&(e.isBlocked=!0,r.set(t,e)),await y(t),console.log(`Blocked video in tab ${t}: ${o}`)}catch(e){console.error("Error blocking video:",e)}}async function z(t,o){var l;if(!((l=o.tab)!=null&&l.id)||!t.data)return;const e=o.tab.id,{isStudy:i,videoInfo:s}=t.data;if(console.log(`User classified video as ${i?"study":"fun"}: ${s==null?void 0:s.title}`),!i&&await $()){await b(e,"You've reached your fun time limit for today!");return}const n=r.get(e);n&&(await p(e,n.videoId,n.url,s,i),n.classification=i?"study":"fun",r.set(e,n))}async function B(t){console.log(`Tab ${t} removed`);try{await y(t),r.delete(t);const o=await A(t);o&&o.watchTime>10&&await k({...o,endTime:Date.now()})}catch(o){console.error("Error handling tab removal:",o)}}async function P(t,o,e){if(o.status==="complete"&&e.url){const i=N(e.url),s=r.get(t);i&&s&&s.videoId!==i?(console.log(`Video changed in tab ${t}: ${s.videoId} -> ${i}`),await y(t),r.delete(t)):!i&&s&&(console.log(`User navigated away from YouTube in tab ${t}`),await y(t),r.delete(t))}}chrome.runtime.onStartup.addListener(F);chrome.runtime.onInstalled.addListener(F);chrome.runtime.onMessage.addListener((t,o,e)=>(console.log("Service worker received message:",t.type,t.data),t.type==="GET_SETTINGS"?(S().then(i=>{console.log("Sending settings:",i),e(i)}).catch(i=>{console.error("Error getting settings:",i),e({error:i.message})}),!0):t.type==="GET_STATS"?(Promise.all([T(),U()]).then(([i,s])=>{console.log("Sending stats:",{stats:i,remainingFunTime:s}),e({stats:i,remainingFunTime:s})}).catch(i=>{console.error("Error getting stats:",i),e({error:i.message})}),!0):t.type==="UPDATE_SETTINGS"?(V(t.data).then(()=>{console.log("Settings updated successfully"),e({success:!0})}).catch(i=>{console.error("Error updating settings:",i),e({error:i.message})}),!0):t.type==="INIT_CHECK"?(S().then(i=>{const s={isFirstTime:i.isFirstTime,hasStudyArea:!!i.studyArea};console.log("Sending init check:",s),e(s)}).catch(i=>{console.error("Error in init check:",i),e({error:i.message})}),!0):t.type==="RESET_DATA"?(I().then(()=>{console.log("Data reset successfully"),e({success:!0})}).catch(i=>{console.error("Error resetting data:",i),e({error:i.message})}),!0):((async()=>{var i;try{switch(t.type){case"VIDEO_DETECTED":await H(t,o);break;case"CLASSIFICATION_RESPONSE":await z(t,o);break;case"VIDEO_ENDED":(i=o.tab)!=null&&i.id&&await y(o.tab.id);break;case"VISIBILITY_CHANGE":await Y(t,o);break;default:console.warn("Unknown message type:",t.type)}}catch(s){console.error("Error handling message:",s)}})(),!1)));chrome.tabs.onRemoved.addListener(B);chrome.tabs.onUpdated.addListener(P);chrome.runtime.onSuspend.addListener(async()=>{console.log("Extension suspending, saving all active sessions...");for(const[t]of r.entries())try{await L(t,!0)}catch(o){console.error(`Error saving session for tab ${t}:`,o)}});console.log("YouTube Study Tracker Service Worker Loaded");

import{e as R,c as P}from"./assets/youtube-api-BUNFlId9.js";const H="modulepreload",G=function(t){return"/"+t},V={},F=function(i,e,o){let s=Promise.resolve();if(e&&e.length>0){document.getElementsByTagName("link");const a=document.querySelector("meta[property=csp-nonce]"),r=(a==null?void 0:a.nonce)||(a==null?void 0:a.getAttribute("nonce"));s=Promise.all(e.map(n=>{if(n=G(n),n in V)return;V[n]=!0;const c=n.endsWith(".css"),m=c?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${n}"]${m}`))return;const l=document.createElement("link");if(l.rel=c?"stylesheet":H,c||(l.as="script",l.crossOrigin=""),l.href=n,r&&l.setAttribute("nonce",r),document.head.appendChild(l),c)return new Promise((w,A)=>{l.addEventListener("load",w),l.addEventListener("error",()=>A(new Error(`Unable to preload CSS for ${n}`)))})}))}return s.then(()=>i()).catch(a=>{const r=new Event("vite:preloadError",{cancelable:!0});if(r.payload=a,window.dispatchEvent(r),!r.defaultPrevented)throw a})},k={studyArea:null,funTimeLimit:20,isFirstTime:!0,notifications:!0},L={totalStudyTime:0,totalFunTime:0,dailyStudyTime:0,dailyFunTime:0,lastResetDate:new Date().toISOString().split("T")[0]},d={SETTINGS:"settings",TIME_STATS:"timeStats",ACTIVE_SESSIONS:"activeSessions",SESSION_HISTORY:"sessionHistory"};async function $(){try{const t=[d.SETTINGS,d.TIME_STATS,d.ACTIVE_SESSIONS,d.SESSION_HISTORY],i=await chrome.storage.local.get(t),e={};if(i.settings||(e.settings=k),!i.timeStats)e.timeStats=L;else{const o=i.timeStats,s=new Date().toISOString().split("T")[0];o.lastResetDate!==s&&(e.timeStats={...o,dailyStudyTime:0,dailyFunTime:0,lastResetDate:s})}i.activeSessions||(e.activeSessions={}),i.sessionHistory||(e.sessionHistory=[]),Object.keys(e).length>0&&await chrome.storage.local.set(e),console.log("Storage initialized successfully")}catch(t){throw console.error("Error initializing storage:",t),t}}async function y(){try{return(await chrome.storage.local.get(d.SETTINGS)).settings||k}catch(t){return console.error("Error getting settings:",t),k}}async function U(t){try{const e={...await y(),...t};await chrome.storage.local.set({[d.SETTINGS]:e}),console.log("Settings updated:",e)}catch(i){throw console.error("Error updating settings:",i),i}}async function h(){try{return(await chrome.storage.local.get(d.TIME_STATS)).timeStats||L}catch(t){return console.error("Error getting time stats:",t),L}}async function M(t,i){try{const e=await h(),o=new Date().toISOString().split("T")[0];e.lastResetDate!==o&&(e.dailyStudyTime=0,e.dailyFunTime=0,e.lastResetDate=o),t?(e.totalStudyTime+=i,e.dailyStudyTime+=i):(e.totalFunTime+=i,e.dailyFunTime+=i),await chrome.storage.local.set({[d.TIME_STATS]:e}),console.log(`Added ${i} seconds to ${t?"study":"fun"} time`)}catch(e){throw console.error("Error adding time:",e),e}}async function f(){try{return(await chrome.storage.local.get(d.ACTIVE_SESSIONS)).activeSessions||{}}catch(t){return console.error("Error getting active sessions:",t),{}}}async function D(t,i){try{const e=await f();e[t.toString()]=i,await chrome.storage.local.set({[d.ACTIVE_SESSIONS]:e}),console.log(`Updated active session for tab ${t}`)}catch(e){throw console.error("Error updating active session:",e),e}}async function E(t){try{const i=await f(),e=i[t.toString()];return e?(delete i[t.toString()],await chrome.storage.local.set({[d.ACTIVE_SESSIONS]:i}),console.log(`Removed active session for tab ${t}`),e):null}catch(i){throw console.error("Error removing active session:",i),i}}async function v(t){try{const e=(await chrome.storage.local.get(d.SESSION_HISTORY)).sessionHistory||[];e.push({...t,endTime:t.endTime||Date.now()}),e.length>100&&e.splice(0,e.length-100),await chrome.storage.local.set({[d.SESSION_HISTORY]:e}),console.log("Added session to history:",t.title)}catch(i){throw console.error("Error adding session to history:",i),i}}async function p(){try{const t=await y(),i=await h(),e=i.dailyStudyTime/3600,a=t.funTimeLimit*e*60+10*60;return console.log(`Fun time check: ${i.dailyFunTime}s / ${a}s limit`),i.dailyFunTime>=a}catch(t){return console.error("Error checking fun time limit:",t),!1}}async function I(){try{const t=await y(),i=await h(),e=i.dailyStudyTime/3600,a=t.funTimeLimit*e*60+10*60,r=Math.max(0,a-i.dailyFunTime);return Math.floor(r/60)}catch(t){return console.error("Error getting remaining fun time:",t),0}}async function Y(){try{await chrome.storage.local.clear(),await $(),console.log("All data reset successfully")}catch(t){throw console.error("Error resetting data:",t),t}}const N=Object.freeze(Object.defineProperty({__proto__:null,addSessionToHistory:v,addTime:M,getActiveSessions:f,getRemainingFunTime:I,getSettings:y,getTimeStats:h,initializeStorage:$,isFunTimeLimitExceeded:p,removeActiveSession:E,resetAllData:Y,updateActiveSession:D,updateSettings:U},Symbol.toStringTag,{value:"Module"})),u=new Map,g=new Map;console.log("YouTube Study Tracker Service Worker Starting...");async function x(){try{console.log("Initializing extension storage..."),await $(),await z(),console.log("Extension initialized successfully")}catch(t){console.error("Error initializing extension:",t)}}async function z(){try{const t=await f(),i=await chrome.tabs.query({}),e=new Set(i.map(o=>{var s;return(s=o.id)==null?void 0:s.toString()}).filter(Boolean));for(const o in t){const s=t[o];if(!e.has(o)){console.log(`Cleaning up stale session for tab ${o}`);const a=parseInt(o);await E(a),s.watchTime>30&&await v({...s,endTime:Date.now()})}}}catch(t){console.error("Error cleaning up stale sessions:",t)}}async function B(t,i){var a,r;if(!((a=i.tab)!=null&&a.id)||!((r=t.data)!=null&&r.url)){console.warn("Invalid video detection message:",t);return}const e=i.tab.id,o=t.data.url,s=t.data.videoId||R(o);if(!s){console.warn("Could not extract video ID from URL:",o);return}console.log(`Video detected in tab ${e}: ${s}`);try{await T(e);const n=await y();if(!n.studyArea){console.log("No study area set, requesting first-time setup"),await chrome.tabs.sendMessage(e,{type:"SHOW_SETUP",data:{isFirstTime:!0}});return}const c=await P(s,n.studyArea.name,n.youtubeApiKey);console.log("Video classification result:",c);let m="unknown";if(c.recommendedClassification==="study")m="study",await b(e,s,o,c.videoInfo,!0);else if(c.recommendedClassification==="fun"){if(m="fun",await p()){console.log("Fun time limit exceeded, blocking video"),await C(e,"Fun time limit exceeded for today");return}await b(e,s,o,c.videoInfo,!1)}else{await chrome.tabs.sendMessage(e,{type:"REQUEST_CLASSIFICATION",data:{videoInfo:c.videoInfo,isEducationalCategory:c.isEducationalCategory,isRelatedToStudyArea:c.isRelatedToStudyArea,studyArea:n.studyArea.name}});return}u.set(e,{tabId:e,videoId:s,url:o,isBlocked:!1,startTime:Date.now(),lastUpdateTime:Date.now(),classification:m,isVisible:!0})}catch(n){console.error("Error handling video detection:",n)}}async function b(t,i,e,o,s){try{const a={videoId:i,title:(o==null?void 0:o.title)||"Unknown Video",category:(o==null?void 0:o.categoryName)||"Unknown",categoryId:(o==null?void 0:o.categoryId)||0,isStudyRelated:s,startTime:Date.now(),watchTime:0,tabId:t,url:e};await D(t,a),await K(t),console.log(`Started ${s?"study":"fun"} session for video: ${o==null?void 0:o.title}`),await chrome.tabs.sendMessage(t,{type:"SESSION_STARTED",data:{isStudy:s,videoInfo:o,classification:s?"study":"fun"}})}catch(a){console.error("Error starting video session:",a)}}async function K(t){g.has(t)&&clearInterval(g.get(t));const i=setInterval(async()=>{try{await O(t)}catch(e){console.error("Error in time tracking interval:",e),clearInterval(i),g.delete(t)}},5e3);g.set(t,i),console.log(`Started time tracking for tab ${t}`)}async function T(t){g.has(t)&&(clearInterval(g.get(t)),g.delete(t),console.log(`Stopped time tracking for tab ${t}`)),await O(t,!0)}async function q(t,i){var a,r;if(!((a=i.tab)!=null&&a.id))return;const e=i.tab.id,o=(r=t.data)==null?void 0:r.isVisible;console.log(`Tab ${e} visibility changed to: ${o}`);const s=u.get(e);s&&(s.isVisible=o,u.set(e,s))}async function O(t,i=!1){var e;try{const s=(await f())[t.toString()];if(!s){console.log(`No active session found for tab ${t}`);return}let a=!1,r=0;try{const S=await chrome.tabs.sendMessage(t,{type:"GET_PLAYBACK_STATE"});a=(S==null?void 0:S.isPlaying)||!1,r=(S==null?void 0:S.currentTime)||0}catch{console.log(`Could not get playback state for tab ${t}, assuming not playing`),a=!1}const n=u.get(t),c=(n==null?void 0:n.isVisible)??!0,m=Date.now(),l=Math.floor((m-s.startTime)/1e3);if((!a||!c)&&!i){console.log(`Not counting time for tab ${t}: playing=${a}, visible=${c}`);return}const w={...s,watchTime:l,endTime:i?m:void 0};await D(t,w);const A=((e=u.get(t))==null?void 0:e.lastUpdateTime)||s.startTime,_=Math.floor((m-A)/1e3);_>0&&(console.log(`Adding ${_} seconds of ${s.isStudyRelated?"study":"fun"} time for tab ${t}`),await M(s.isStudyRelated,_),n&&(n.lastUpdateTime=m,u.set(t,n))),!s.isStudyRelated&&!i&&await p()&&(console.log("Fun time limit exceeded during session, blocking video"),await C(t,"You've reached your fun time limit for today!"),await T(t)),i&&l>10&&(console.log(`Ending session for tab ${t} with ${l} seconds watched`),await v(w),await E(t),u.delete(t))}catch(o){console.error("Error updating session time:",o)}}async function C(t,i){try{await chrome.tabs.sendMessage(t,{type:"BLOCK_VIDEO",data:{message:i}});const e=u.get(t);e&&(e.isBlocked=!0,u.set(t,e)),await T(t),console.log(`Blocked video in tab ${t}: ${i}`)}catch(e){console.error("Error blocking video:",e)}}async function W(t,i){var r;if(!((r=i.tab)!=null&&r.id)||!t.data)return;const e=i.tab.id,{isStudy:o,videoInfo:s}=t.data;if(console.log(`User classified video as ${o?"study":"fun"}: ${s==null?void 0:s.title}`),!o&&await p()){await C(e,"You've reached your fun time limit for today!");return}const a=u.get(e);a&&(await b(e,a.videoId,a.url,s,o),a.classification=o?"study":"fun",u.set(e,a))}async function j(t){console.log(`Tab ${t} removed`);try{await T(t),u.delete(t);const i=await E(t);i&&i.watchTime>10&&await v({...i,endTime:Date.now()})}catch(i){console.error("Error handling tab removal:",i)}}async function Q(t,i,e){if(i.status==="complete"&&e.url){const o=R(e.url),s=u.get(t);o&&s&&s.videoId!==o?(console.log(`Video changed in tab ${t}: ${s.videoId} -> ${o}`),await T(t),u.delete(t)):!o&&s&&(console.log(`User navigated away from YouTube in tab ${t}`),await T(t),u.delete(t))}}chrome.runtime.onStartup.addListener(x);chrome.runtime.onInstalled.addListener(x);chrome.runtime.onMessage.addListener((t,i,e)=>(console.log("Service worker received message:",t.type,t.data),(async()=>{var o;try{switch(t.type){case"VIDEO_DETECTED":await B(t,i);break;case"CLASSIFICATION_RESPONSE":await W(t,i);break;case"VIDEO_ENDED":(o=i.tab)!=null&&o.id&&await T(i.tab.id);break;case"GET_SETTINGS":const s=await y();e(s);break;case"UPDATE_SETTINGS":await U(t.data),e({success:!0});break;case"GET_STATS":const{getTimeStats:a}=await F(async()=>{const{getTimeStats:l}=await Promise.resolve().then(()=>N);return{getTimeStats:l}},void 0),r=await a(),n=await I();e({stats:r,remainingFunTime:n});break;case"INIT_CHECK":const c=await y();e({isFirstTime:c.isFirstTime,hasStudyArea:!!c.studyArea});break;case"VISIBILITY_CHANGE":await q(t,i);break;case"RESET_DATA":const{resetAllData:m}=await F(async()=>{const{resetAllData:l}=await Promise.resolve().then(()=>N);return{resetAllData:l}},void 0);await m(),e({success:!0});break;default:console.warn("Unknown message type:",t.type)}}catch(s){console.error("Error handling message:",s),e({error:s.message})}})(),!0));chrome.tabs.onRemoved.addListener(j);chrome.tabs.onUpdated.addListener(Q);chrome.runtime.onSuspend.addListener(async()=>{console.log("Extension suspending, saving all active sessions...");for(const[t]of u.entries())try{await O(t,!0)}catch(i){console.error(`Error saving session for tab ${t}:`,i)}});console.log("YouTube Study Tracker Service Worker Loaded");
